name: Docker Build and Push CMON Proxy

on:
  push:
    branches:
      - main
      - 'release-*'
  workflow_dispatch:
    inputs:
      custom_tag:
        description: 'Custom image tag (optional). If provided, this tag will be used instead of the automatic tagging strategy.'
        required: false
        type: string
      frontend_tag:
        description: 'Frontend image tag (optional). If not provided, will use appropriate default based on branch.'
        required: false
        type: string
  repository_dispatch:
    types: [frontend-build-completed]


env:
  REGISTRY: europe-docker.pkg.dev/severalnines-public/clustercontrol
  IMAGE_NAME: ccmgr

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.branch || github.ref_name }}
      
      - name: Debug environment
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Client payload branch: ${{ github.event.client_payload.branch }}"
          echo "Client payload build_number: ${{ github.event.client_payload.build_number }}"
          echo "Currently on branch: $(git rev-parse --abbrev-ref HEAD)"

      - name: Validate release branch format
        id: validate-branch
        run: |
          BRANCH_NAME="${{ github.event.client_payload.branch || github.ref_name }}"
          echo "Branch name: $BRANCH_NAME"
          echo "Trigger event: ${{ github.event_name }}"
          
          # Only validate semver format for automatic push triggers, not manual dispatches or repository dispatches
          if [[ "${{ github.event_name }}" == "push" && "$BRANCH_NAME" == release-* ]]; then
            # Extract version part after 'release-'
            VERSION_PART="${BRANCH_NAME#release-}"
            
            # Validate semver format (X.Y.Z where X, Y, Z are numbers)
            if [[ "$VERSION_PART" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Valid release branch format: $BRANCH_NAME"
              echo "VALID_RELEASE_BRANCH=true" >> $GITHUB_ENV
            else
              echo "Invalid release branch format: $BRANCH_NAME"
              echo "Release branches must follow format: release-X.Y.Z (e.g., release-1.2.3)"
              echo "Automatic builds from release branches require strict semver format"
              echo "VALID_RELEASE_BRANCH=false" >> $GITHUB_ENV
              exit 1
            fi
          else
            echo "VALID_RELEASE_BRANCH=true" >> $GITHUB_ENV
          fi

      - name: Determine tags and frontend image
        id: set-tags
        run: |
          # Check if custom tag is provided
          CUSTOM_TAG="${{ github.event.inputs.custom_tag }}"
          CUSTOM_FRONTEND_TAG="${{ github.event.inputs.frontend_tag }}"
          
          BUILD_NUMBER="${{ github.run_number }}"
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          
          if [[ -n "$CUSTOM_TAG" ]]; then
            # Custom tag provided - use it directly
            echo "CUSTOM_TAG=$CUSTOM_TAG" >> $GITHUB_ENV
            echo "IS_RELEASE=false" >> $GITHUB_ENV
            
            # Use custom frontend tag if provided, otherwise use main-dev-latest
            if [[ -n "$CUSTOM_FRONTEND_TAG" ]]; then
              echo "FRONTEND_TAG=$CUSTOM_FRONTEND_TAG" >> $GITHUB_ENV
              echo "Custom build - using custom tag: $CUSTOM_TAG, custom frontend tag: $CUSTOM_FRONTEND_TAG"
            else
              echo "FRONTEND_TAG=main-dev-latest" >> $GITHUB_ENV
              echo "Custom build - using custom tag: $CUSTOM_TAG, default frontend tag: main-dev-latest"
            fi
          else
            if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
              BRANCH_NAME="${{ github.event.client_payload.branch }}"
            elif [[ "${{ github.event_name }}" == "push" ]]; then
              BRANCH_NAME="${{ github.ref_name }}"
            else
              BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
            fi
            echo "Branch name: $BRANCH_NAME"
            
            if [[ "$BRANCH_NAME" == release-* ]]; then
              # Release branch: use version from file and also tag as latest
              if [[ ! -f "version" ]]; then
                echo "Error: version file not found for release branch"
                exit 1
              fi
              VERSION=$(cat version | tr -d '\n' | tr -d ' ')
              if [[ -z "$VERSION" ]]; then
                echo "Error: version file is empty"
                exit 1
              fi
              VERSION_WITH_BUILD="release-${VERSION}-${BUILD_NUMBER}"
              echo "VERSION_TAG=$VERSION_WITH_BUILD" >> $GITHUB_ENV
              echo "LATEST_TAG=latest" >> $GITHUB_ENV
              echo "IS_RELEASE=true" >> $GITHUB_ENV
              
              # For frontend tag, use the version with build number if triggered by repository_dispatch
              if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
                FRONTEND_BUILD_NUMBER="${{ github.event.client_payload.build_number }}"
                echo "FRONTEND_TAG=release-${VERSION}-${FRONTEND_BUILD_NUMBER}" >> $GITHUB_ENV
                echo "Release build - using version: $VERSION_WITH_BUILD, frontend tag: release-${VERSION}-${FRONTEND_BUILD_NUMBER}"
              else
                echo "FRONTEND_TAG=release-${VERSION}" >> $GITHUB_ENV
                echo "Release build - using version: $VERSION_WITH_BUILD, frontend tag: release-${VERSION}"
              fi
            else
              # Other branches: use branch-dev-latest format
              CLEAN_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g')
              DEV_TAG="${CLEAN_BRANCH_NAME}-dev-latest"
              echo "DEV_TAG=$DEV_TAG" >> $GITHUB_ENV
              echo "IS_RELEASE=false" >> $GITHUB_ENV
              echo "FRONTEND_TAG=main-dev-latest" >> $GITHUB_ENV
              echo "Development build - using tag: $DEV_TAG, frontend tag: main-dev-latest"
            fi
          fi
          
      - name: Debug environment variables
        run: |
          echo "CUSTOM_TAG: ${{ env.CUSTOM_TAG }}"
          echo "VERSION_TAG: ${{ env.VERSION_TAG }}"
          echo "DEV_TAG: ${{ env.DEV_TAG }}"
          echo "FRONTEND_TAG: ${{ env.FRONTEND_TAG }}"
          echo "BUILD_NUMBER: ${{ env.BUILD_NUMBER }}"
          echo "IS_RELEASE: ${{ env.IS_RELEASE }}"
          
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.S9S_PUBLIC_GCP_SA_KEY }}'

      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker europe-docker.pkg.dev --quiet
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          load: true
          build-args: |
            FRONTEND_TAG=${{ env.FRONTEND_TAG }}
          tags: ${{ env.IMAGE_NAME }}:${{ env.CUSTOM_TAG || env.VERSION_TAG || env.DEV_TAG }}

      - name: Tag and Push Docker images
        run: |
          if [[ -n "${{ env.CUSTOM_TAG }}" ]]; then
            # Custom tag build: tag and push custom tag only
            docker tag ${{ env.IMAGE_NAME }}:${{ env.CUSTOM_TAG }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CUSTOM_TAG }}
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CUSTOM_TAG }}
            echo "Pushed custom tag: ${{ env.CUSTOM_TAG }}"
          elif [[ "${{ env.IS_RELEASE }}" == "true" ]]; then
            # Release build: tag and push both version with build number and latest
            docker tag ${{ env.IMAGE_NAME }}:${{ env.VERSION_TAG }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION_TAG }}
            docker tag ${{ env.IMAGE_NAME }}:${{ env.VERSION_TAG }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION_TAG }}
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}
            echo "Pushed tags: ${{ env.VERSION_TAG }}, ${{ env.LATEST_TAG }}"
          else
            # Development build: tag and push dev tag only
            docker tag ${{ env.IMAGE_NAME }}:${{ env.DEV_TAG }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEV_TAG }}
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEV_TAG }}
            echo "Pushed tag: ${{ env.DEV_TAG }}"
          fi 
