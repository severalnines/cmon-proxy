name: Patch to Previous Release

"on":
  pull_request:
    types: [labeled]

jobs:
  patch-to-release:
    if: github.event.action == 'labeled'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check if label matches existing release branch
        id: check-branch
        run: |
          LABEL_NAME="${{ github.event.label.name }}"
          echo "Label name: $LABEL_NAME"
          
          # Check if label starts with 'release-' prefix
          if [[ ! "$LABEL_NAME" =~ ^release- ]]; then
            echo "Label does not start with 'release-': $LABEL_NAME"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "not_release_label=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Sanitize branch name (GitHub Actions security)
          if [[ ! "$LABEL_NAME" =~ ^[a-zA-Z0-9/_.-]+$ ]]; then
            echo "Invalid branch name format: $LABEL_NAME"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if the label name matches an existing branch (local or remote)
          if git show-ref --verify --quiet refs/heads/$LABEL_NAME || git show-ref --verify --quiet refs/remotes/origin/$LABEL_NAME; then
            echo "Branch $LABEL_NAME exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "base_branch=$LABEL_NAME" >> $GITHUB_OUTPUT
          else
            echo "Branch $LABEL_NAME does not exist"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create patch branch and cherry-pick commits
        if: steps.check-branch.outputs.branch_exists == 'true'
        id: create-patch
        run: |
          BASE_BRANCH="${{ steps.check-branch.outputs.base_branch }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          PR_BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          PATCH_BRANCH="patch-$PR_NUMBER-to-$BASE_BRANCH"
          
          echo "Creating patch branch: $PATCH_BRANCH"
          echo "Target release branch: $BASE_BRANCH"
          echo "PR branch: $PR_BRANCH"
          echo "PR base branch: $PR_BASE_BRANCH"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create new branch based on the target release branch
          git checkout -b $PATCH_BRANCH origin/$BASE_BRANCH
          
          # Get only the commits that are specific to the PR (difference between PR base and PR branch)
          COMMITS=$(git rev-list --reverse origin/$PR_BASE_BRANCH..origin/$PR_BRANCH)
          
          if [ -z "$COMMITS" ]; then
            echo "No PR-specific commits to cherry-pick"
            echo "success=false" >> $GITHUB_OUTPUT
            echo "error=No PR-specific commits found to cherry-pick" >> $GITHUB_OUTPUT
            # Clean up the branch
            git checkout origin/$BASE_BRANCH
            git branch -D $PATCH_BRANCH 2>/dev/null || true
            exit 0
          fi
          
          echo "PR-specific commits to cherry-pick:"
          echo "$COMMITS"
          
          # Cherry-pick commits
          FAILED_COMMITS=""
          for commit in $COMMITS; do
            echo "Cherry-picking commit: $commit"
            if ! git cherry-pick $commit; then
              echo "Cherry-pick failed for commit: $commit"
              FAILED_COMMITS="$FAILED_COMMITS $commit"
              # Try to abort the cherry-pick to clean up
              git cherry-pick --abort 2>/dev/null || true
            fi
          done
          
          if [ -n "$FAILED_COMMITS" ]; then
            echo "success=false" >> $GITHUB_OUTPUT
            echo "error=Cherry-pick failed for commits:$FAILED_COMMITS" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Push the new branch (force push to overwrite any existing patch branch)
          git push --force-with-lease origin $PATCH_BRANCH
          
          echo "success=true" >> $GITHUB_OUTPUT
          echo "patch_branch=$PATCH_BRANCH" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
      
      - name: Create pull request
        if: steps.create-patch.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: originalPR } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.pull_request.number }}
            });
            
            const patchBranch = '${{ steps.create-patch.outputs.patch_branch }}';
            const baseBranch = '${{ steps.create-patch.outputs.base_branch }}';
            const originalPRNumber = ${{ github.event.pull_request.number }};
            
            const newTitle = `${originalPR.title} (${baseBranch})`;
            const newBody = `This PR is based on #${originalPRNumber}\n\n${originalPR.body || ''}`;
            
            try {
              const { data: newPR } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: newTitle,
                body: newBody,
                head: patchBranch,
                base: baseBranch
              });
              
              console.log(`Created PR #${newPR.number}: ${newPR.html_url}`);
              
              // Add a comment to the original PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: originalPRNumber,
                body: `ü§ñ Patch PR created: #${newPR.number} targeting \`${baseBranch}\``
              });
              
            } catch (error) {
              console.error('Error creating PR:', error);
              core.setFailed(`Failed to create PR: ${error.message}`);
            }
      
      - name: Comment on failure
        if: steps.check-branch.outputs.branch_exists == 'false' && steps.check-branch.outputs.not_release_label != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labelName = '${{ github.event.label.name }}';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.pull_request.number }},
              body: `‚ö†Ô∏è Cannot create patch PR: Branch \`${labelName}\` does not exist.`
            });
      
      - name: Comment on cherry-pick failure
        if: steps.create-patch.outputs.success == 'false' && steps.check-branch.outputs.branch_exists == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const error = '${{ steps.create-patch.outputs.error }}';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.pull_request.number }},
              body: `‚ùå Failed to create patch PR: ${error}`
            });